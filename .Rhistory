wordCountProbGram3Break <- sqldf("select trim(substr(word, 1, charindex(' ', word, charindex(' ', word) + 1))) as word,
trim(substr(word, charindex(' ', word, charindex(' ', word) + 1), length(word))) as prediction,
ocurrencies,
probability
from wordCountProbGram3")
save(wordCountProbGram3Break, file = "C:\\Users\\lc43922\\Coursera_Final_Project\\gram3Break.RData")
wordCountProbGram4Break <- sqldf("SELECT substr(word, 1, length(word) - CHARINDEX(' ', REVERSE(word))) as word,
REVERSE(substr(REVERSE(word), 1, CHARINDEX(' ', REVERSE(word)) - 1)) as prediction,
ocurrencies,
probability
from wordCountProbGram4")
save(wordCountProbGram4Break, file = "C:\\Users\\lc43922\\Coursera_Final_Project\\gram4Break.RData")
####################################################################################
# OBJECTIVE:  script to search values on the ngrams                                #
# AUTHOR   :  Renato Pedroso Neto                                                  #
# COMPANY  :  Coursera John Hopkins Capstone Project                               #
# DATA     :  saved NGRAMS (ngram*.RData                                           #
####################################################################################
library(data.table)
library(dplyr)
library(stringr)
searchBestMatch <- function(searchValue, n = 1){
# this function receive a string to get the best match on the probabilities grams
# searchValue --> string of any size
# n           --> how many matches to return
# return      --> data frame with best match / matches
size <- length(strsplit(searchValue, ' ')[[1]])
toWord <- tail(strsplit(searchValue, ' ')[[1]], n = 3)
found <- 0
bestMatch = data.frame( word = character(n),
ocurrencies = integer(n),
probability = numeric(n),
stringsAsFactors = FALSE)
if (size == 0){
bestMatch <- arrange(wordCountProbGram1Break, desc(probability))[1:n,]
}
if (size == 1){
parsedWordNGram2 <- strsplit(toWord, ' ')[[1]][1]
bestMatchAux <- wordCountProbGram2Break[.(parsedWordNGram2)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
if (size == 2){
parsedWordNGram3 <- toWord[1:2]
parsedWordNGram3 <- paste(parsedWordNGram3, collapse = ' ')
bestMatchAux <- wordCountProbGram3Break[.(parsedWordNGram3)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
if (size == 3){
parsedWordNGram4 <- toWord[1:3]
parsedWordNGram4 <- paste(parsedWordNGram4, collapse = ' ')
bestMatchAux <- wordCountProbGram4Break[.(parsedWordNGram4)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
return(bestMatch)
}
searchWrapper <- function(uiVariable, size = 1){
# this function receive a string, from shiny web app, and deal with the search
# in order to pass in all necessary ngrams
# uiVarible   --> string of any size
# size        --> how many values to retrieve on the search
# return      --> data frame with best match / matches
uiVariable <- trimws(str_replace_all(tolower(uiVariable),"[[:punct:]]"," "), which = "both")
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 3)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
# did it find something?
if (nrow(bestMatch) == 1 & is.na(bestMatch$prediction) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 2)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (nrow(bestMatch) == 1 & is.na(bestMatch$prediction) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 1)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (nrow(bestMatch) == 1 & is.na(bestMatch$prediction) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 0)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
return(bestMatch)
}
setwd("C:\\Users\\lc43922\\Coursera_Final_Project")
load(file = 'gram1Break.RData')
load(file = 'gram2Break.RData')
load(file = 'gram3Break.RData')
load(file = 'gram4Break.RData')
#transform all the DF to DT asn set the key for fast retrieve of values
wordCountProbGram1Break <- as.data.table(wordCountProbGram1Break)
wordCountProbGram2Break <- as.data.table(wordCountProbGram2Break)
wordCountProbGram3Break <- as.data.table(wordCountProbGram3Break)
wordCountProbGram4Break <- as.data.table(wordCountProbGram4Break)
setkey(wordCountProbGram1Break, word)
setkey(wordCountProbGram2Break, word)
setkey(wordCountProbGram3Break, word)
setkey(wordCountProbGram4Break, word)
bestMatch <- searchWrapper('the', size = 10)
bestMatch
bestMatch$prediction
searchWrapper <- function(uiVariable, size = 1){
# this function receive a string, from shiny web app, and deal with the search
# in order to pass in all necessary ngrams
# uiVarible   --> string of any size
# size        --> how many values to retrieve on the search
# return      --> data frame with best match / matches
uiVariable <- trimws(str_replace_all(tolower(uiVariable),"[[:punct:]]"," "), which = "both")
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 3)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
# did it find something?
if (nrow(bestMatch) == 1 & is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 2)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (nrow(bestMatch) == 1 & is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 1)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (nrow(bestMatch) == 1 & is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 0)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
return(bestMatch)
}
bestMatch <- searchWrapper('the', size = 10)
bestMatch
bestMatch$prediction
bestMatch <- searchWrapper('the', size = 10)
bestMatch$prediction
bestMatch
bestMatch <- searchWrapper('the time is', size = 10)
bestMatch
bestMatch$prediction
bestMatch <- searchWrapper('my dream is', size = 10)
bestMatch
bestMatch <- searchWrapper('dream is to', size = 3)
bestMatch
bestMatch <- searchWrapper('is to fly', size = 3)
bestMatch
bestMatch <- searchWrapper('fly', size = 3)
bestMatch
bestMatch <- searchWrapper('is to fly', size = 3)
bestMatch
debugSource('C:/Users/lc43922/Coursera_Final_Project/searchNgram.R')
bestMatch$prediction[1]
nrow(bestMatch)
View(bestMatch)
####################################################################################
# OBJECTIVE:  script to search values on the ngrams                                #
# AUTHOR   :  Renato Pedroso Neto                                                  #
# COMPANY  :  Coursera John Hopkins Capstone Project                               #
# DATA     :  saved NGRAMS (ngram*.RData                                           #
####################################################################################
library(data.table)
library(dplyr)
library(stringr)
searchBestMatch <- function(searchValue, n = 1){
# this function receive a string to get the best match on the probabilities grams
# searchValue --> string of any size
# n           --> how many matches to return
# return      --> data frame with best match / matches
size <- length(strsplit(searchValue, ' ')[[1]])
toWord <- tail(strsplit(searchValue, ' ')[[1]], n = 3)
found <- 0
bestMatch = data.frame( word = character(n),
ocurrencies = integer(n),
probability = numeric(n),
stringsAsFactors = FALSE)
if (size == 0){
bestMatch <- arrange(wordCountProbGram1Break, desc(probability))[1:n,]
}
if (size == 1){
parsedWordNGram2 <- strsplit(toWord, ' ')[[1]][1]
bestMatchAux <- wordCountProbGram2Break[.(parsedWordNGram2)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
if (size == 2){
parsedWordNGram3 <- toWord[1:2]
parsedWordNGram3 <- paste(parsedWordNGram3, collapse = ' ')
bestMatchAux <- wordCountProbGram3Break[.(parsedWordNGram3)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
if (size == 3){
parsedWordNGram4 <- toWord[1:3]
parsedWordNGram4 <- paste(parsedWordNGram4, collapse = ' ')
bestMatchAux <- wordCountProbGram4Break[.(parsedWordNGram4)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
return(bestMatch)
}
searchWrapper <- function(uiVariable, size = 1){
# this function receive a string, from shiny web app, and deal with the search
# in order to pass in all necessary ngrams
# uiVarible   --> string of any size
# size        --> how many values to retrieve on the search
# return      --> data frame with best match / matches
uiVariable <- trimws(str_replace_all(tolower(uiVariable),"[[:punct:]]"," "), which = "both")
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 3)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
# did it find something?
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 2)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 1)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 0)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
return(bestMatch)
}
setwd("C:\\Users\\lc43922\\Coursera_Final_Project")
load(file = 'gram1Break.RData')
load(file = 'gram2Break.RData')
load(file = 'gram3Break.RData')
load(file = 'gram4Break.RData')
#transform all the DF to DT asn set the key for fast retrieve of values
wordCountProbGram1Break <- as.data.table(wordCountProbGram1Break)
wordCountProbGram2Break <- as.data.table(wordCountProbGram2Break)
wordCountProbGram3Break <- as.data.table(wordCountProbGram3Break)
wordCountProbGram4Break <- as.data.table(wordCountProbGram4Break)
setkey(wordCountProbGram1Break, word)
setkey(wordCountProbGram2Break, word)
setkey(wordCountProbGram3Break, word)
setkey(wordCountProbGram4Break, word)
bestMatch <- searchWrapper('is to fly', size = 3)
bestMatch
bestMatch$prediction
bestMatch <- searchWrapper('is to fly over the rainbow', size = 3)
bestMatch
bestMatch <- searchWrapper('is to fly over the rainbow', size = 1)
bestMatch
bestMatch <- searchWrapper('is to fly over the rainbow so high', size = 1)
bestMatch
bestMatch <- searchWrapper('fuck', size = 1)
bestMatch
bestMatch <- searchWrapper('fuck', size = 10)
bestMatch
bestMatch <- searchWrapper('leandro likes to', size = 10)
bestMatch
bestMatch <- searchWrapper('suck', size = 10)
bestMatch
bestMatch <- searchWrapper('suck my', size = 10)
bestMatch
bestMatch <- searchWrapper('mango', size = 10)
bestMatch
load(file = 'gram4Break.RData')
wordCountProbGram4 <- as.data.table(wordCountProbGram4)
load(gram4.RData)
setwd("C:\\Users\\lc43922\\Coursera_Final_Project")
load(gram4.RData)
load('gram4.RData')
wordCountProbGram4 <- as.data.table(wordCountProbGram4)
setkey(wordCountProbGram4, word)
################################
save(wordCountProbGram4Break, file = "C:\\Users\\lc43922\\Coursera_Final_Project\\gram4Break.RData")
load(file = 'gram1Break.RData')
load(file = 'gram2Break.RData')
load(file = 'gram3Break.RData')
load(file = 'gram4Break.RData')
type(wordCountProbGram1Break)
class(wordCountProbGram1Break)
####################################################################################
# OBJECTIVE:  script to search values on the ngrams                                #
# AUTHOR   :  Renato Pedroso Neto                                                  #
# COMPANY  :  Coursera John Hopkins Capstone Project                               #
# DATA     :  saved NGRAMS (ngram*.RData                                           #
####################################################################################
library(data.table)
library(dplyr)
library(stringr)
searchBestMatch <- function(searchValue, n = 1){
# this function receive a string to get the best match on the probabilities grams
# searchValue --> string of any size
# n           --> how many matches to return
# return      --> data frame with best match / matches
size <- length(strsplit(searchValue, ' ')[[1]])
toWord <- tail(strsplit(searchValue, ' ')[[1]], n = 3)
found <- 0
bestMatch = data.frame( word = character(n),
ocurrencies = integer(n),
probability = numeric(n),
stringsAsFactors = FALSE)
if (size == 0){
bestMatch <- arrange(wordCountProbGram1Break, desc(probability))[1:n,]
}
if (size == 1){
parsedWordNGram2 <- strsplit(toWord, ' ')[[1]][1]
bestMatchAux <- wordCountProbGram2Break[.(parsedWordNGram2)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
if (size == 2){
parsedWordNGram3 <- toWord[1:2]
parsedWordNGram3 <- paste(parsedWordNGram3, collapse = ' ')
bestMatchAux <- wordCountProbGram3Break[.(parsedWordNGram3)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
if (size == 3){
parsedWordNGram4 <- toWord[1:3]
parsedWordNGram4 <- paste(parsedWordNGram4, collapse = ' ')
bestMatchAux <- wordCountProbGram4Break[.(parsedWordNGram4)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
return(bestMatch)
}
searchWrapper <- function(uiVariable, size = 1){
# this function receive a string, from shiny web app, and deal with the search
# in order to pass in all necessary ngrams
# uiVarible   --> string of any size
# size        --> how many values to retrieve on the search
# return      --> data frame with best match / matches
uiVariable <- trimws(str_replace_all(tolower(uiVariable),"[[:punct:]]"," "), which = "both")
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 3)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
# did it find something?
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 2)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 1)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 0)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
return(bestMatch)
}
setwd("C:\\Users\\lc43922\\Coursera_Final_Project")
load(file = 'gram1Break.RData')
load(file = 'gram2Break.RData')
load(file = 'gram3Break.RData')
load(file = 'gram4Break.RData')
#transform all the DF to DT asn set the key for fast retrieve of values
wordCountProbGram1Break <- as.data.table(wordCountProbGram1Break)
wordCountProbGram2Break <- as.data.table(wordCountProbGram2Break)
wordCountProbGram3Break <- as.data.table(wordCountProbGram3Break)
wordCountProbGram4Break <- as.data.table(wordCountProbGram4Break)
setkey(wordCountProbGram1Break, word)
setkey(wordCountProbGram2Break, word)
setkey(wordCountProbGram3Break, word)
setkey(wordCountProbGram4Break, word)
fread(input = 'gram1Break.RData')
load('gram1.Rdata')
load('gram2.Rdata')
load('gram3.Rdata')
load('gram4.Rdata')
load('gram1Break.Rdata')
load('gram1Break.RData')
load('gram2Break.RData')
load('gram3Break.RData')
load('gram4Break.RData')
wordCountProbGram1Break <- as.data.table(wordCountProbGram1Break)
wordCountProbGram2Break <- as.data.table(wordCountProbGram2Break)
wordCountProbGram3Break <- as.data.table(wordCountProbGram3Break)
wordCountProbGram4Break <- as.data.table(wordCountProbGram4Break)
fwrite(wordCountProbGram1Break, "gram1Break.csv")
library(data.table)
library(data.table)
/data.table
?data.table
remove.packages("data.table")
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table")
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table")
install.packages("data.table")
install.packages("data.table")
library(data.table)
write.csv2(wordCountProbGram1Break, "gram1Break.csv")
write.csv2(wordCountProbGram2Break, "gram2Break.csv")
write.csv2(wordCountProbGram3Break, "gram3Break.csv")
write.csv2(wordCountProbGram4Break, "gram4Break.csv")
library(microbenchmark)
microbenchmark("x <- load(gram4Break.RData","y <- fread(gram4Break.csv, sep = ','", time = 2)
x <- fread('gram4Break.csv', sep = ',')
?data.table
View(x)
####################################################################################
# OBJECTIVE:  script to search values on the ngrams                                #
# AUTHOR   :  Renato Pedroso Neto                                                  #
# COMPANY  :  Coursera John Hopkins Capstone Project                               #
# DATA     :  saved NGRAMS (ngram*.RData                                           #
####################################################################################
library(data.table)
library(dplyr)
library(stringr)
searchBestMatch <- function(searchValue, n = 1){
# this function receive a string to get the best match on the probabilities grams
# searchValue --> string of any size
# n           --> how many matches to return
# return      --> data frame with best match / matches
size <- length(strsplit(searchValue, ' ')[[1]])
toWord <- tail(strsplit(searchValue, ' ')[[1]], n = 3)
found <- 0
bestMatch = data.frame( word = character(n),
ocurrencies = integer(n),
probability = numeric(n),
stringsAsFactors = FALSE)
if (size == 0){
bestMatch <- arrange(wordCountProbGram1Break, desc(probability))[1:n,]
}
if (size == 1){
parsedWordNGram2 <- strsplit(toWord, ' ')[[1]][1]
bestMatchAux <- wordCountProbGram2Break[.(parsedWordNGram2)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
if (size == 2){
parsedWordNGram3 <- toWord[1:2]
parsedWordNGram3 <- paste(parsedWordNGram3, collapse = ' ')
bestMatchAux <- wordCountProbGram3Break[.(parsedWordNGram3)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
if (size == 3){
parsedWordNGram4 <- toWord[1:3]
parsedWordNGram4 <- paste(parsedWordNGram4, collapse = ' ')
bestMatchAux <- wordCountProbGram4Break[.(parsedWordNGram4)]
bestMatch <- arrange(bestMatchAux, desc(probability))[1:n,]
}
return(bestMatch)
}
searchWrapper <- function(uiVariable, size = 1){
# this function receive a string, from shiny web app, and deal with the search
# in order to pass in all necessary ngrams
# uiVarible   --> string of any size
# size        --> how many values to retrieve on the search
# return      --> data frame with best match / matches
uiVariable <- trimws(str_replace_all(tolower(uiVariable),"[[:punct:]]"," "), which = "both")
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 3)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
# did it find something?
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 2)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 1)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
if (is.na(bestMatch$prediction[1]) == TRUE){
string <- tail(strsplit(uiVariable, ' ')[[1]], n = 0)
string <- paste(string, collapse = ' ')
bestMatch <- searchBestMatch(string, n = size)
}
return(bestMatch)
}
setwd("C:\\Users\\lc43922\\Coursera_Final_Project")
load(file = 'gram1Break.RData')
load(file = 'gram2Break.RData')
load(file = 'gram3Break.RData')
load(file = 'gram4Break.RData')
#transform all the DF to DT asn set the key for fast retrieve of values
wordCountProbGram1Break <- as.data.table(wordCountProbGram1Break)
wordCountProbGram2Break <- as.data.table(wordCountProbGram2Break)
wordCountProbGram3Break <- as.data.table(wordCountProbGram3Break)
wordCountProbGram4Break <- as.data.table(wordCountProbGram4Break)
setkey(wordCountProbGram1Break, word)
setkey(wordCountProbGram2Break, word)
setkey(wordCountProbGram3Break, word)
setkey(wordCountProbGram4Break, word)
bestMatch <- searchWrapper('mango', size = 10)
bestMatch
bestMatch$prediction
bestMatch <- searchWrapper('The guy in front of me just bought a pound of bacon, a bouquet, and a case of', size = 10)
bestMatch
bestMatch <- searchWrapper("You're the reason why I smile everyday. Can you follow me please? It would mean the", size = 10)
bestMatch
bestMatch <- searchWrapper("and make me the", size = 10)
bestMatch
bestMatch <- searchWrapper("struggling but the", size = 10)
bestMatch
bestMatch <- searchWrapper("date at the", size = 10)
bestMatch
bestMatch <- searchWrapper("be on my", size = 10)
bestMatch
bestMatch <- searchWrapper("in quite some", size = 10)
bestMatch
bestMatch <- searchWrapper("with his little", size = 10)
bestMatch
bestMatch <- searchWrapper("faith during the", size = 10)
bestMatch
bestMatch <- searchWrapper("faith during the", size = 20)
bestMatch
bestMatch <- searchWrapper("faith during the", size = 40)
bestMatch
bestMatch <- searchWrapper("you must be", size = 40)
bestMatch
bestMatch <- searchWrapper("you must be", size = 10)
bestMatch
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
